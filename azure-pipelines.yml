trigger:
- main  # Adjust to your branch name if necessary

pool:
  vmImage: 'ubuntu-latest'

variables:
  ADB_CONNECT_TIMEOUT: 180  # Increase the timeout to 180 seconds

steps:
- checkout: self

- script: |
    echo "Building Docker image..."
    docker build -t my-custom-image:latest .
  displayName: 'Build Docker Image'

- script: |
    echo "Running Docker container..."
    docker run --name my-container --network host -d my-custom-image:latest /bin/bash -c "while true; do sleep 30; done;"
  displayName: 'Run Docker Container'

- script: |
    echo "Copying PartnerDevices_Automation folder to Docker container..."
    docker cp PartnerDevices_Automation my-container:/app/PartnerDevices_Automation
  displayName: 'Copy Folder to Docker Container'

- script: |
    echo "Creating symbolic links inside Docker container..."
    docker exec my-container /bin/bash -c "cd /app/PartnerDevices_Automation && ln -sf /app/PartnerDevices_Automation/resources/Page_objects/Voicemail.json /app/PartnerDevices_Automation/resources/Page_objects/voicemail.json \
    && ln -sf /app/PartnerDevices_Automation/resources/Page_objects/Common.json /app/PartnerDevices_Automation/resources/Page_objects/common.json \
    && ln -sf /app/PartnerDevices_Automation/resources/Page_objects/People.json /app/PartnerDevices_Automation/resources/Page_objects/people.json"
  displayName: 'Create Symbolic Links'

- script: |
    echo "Testing network connectivity to device..."
    ping -c 4 10.39.8.149
  displayName: 'Test Network Connectivity'

- script: |
    echo "Running Robot Framework tests..."
    docker exec my-container /bin/bash -c "cd /app/PartnerDevices_Automation && robot -d /results -i 237605 tests_teams_room"
  displayName: 'Run Robot Framework Tests'
  env:
    ADB_CONNECT_TIMEOUT: $(ADB_CONNECT_TIMEOUT)

- script: |
    echo "Copying test results from Docker container to host..."
    docker cp my-container:/results $(Build.ArtifactStagingDirectory)/results
  displayName: 'Copy Test Results to Host'

- script: |
    echo "Stopping Docker container..."
    docker stop my-container
    docker rm my-container
  displayName: 'Stop and Remove Docker Container'

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)/results'
    artifact: 'RobotFrameworkResults'
  displayName: 'Publish Test Results as Pipeline Artifact'

- script: |
    echo "Cloning the repository to push test results..."
    git clone https://$(GITHUB_USER):$(GITHUB_TOKEN)@github.com/Anitha-Arun/Automationcode.git
    cd Automationcode
    mkdir -p test_results
    cp -r $(Build.ArtifactStagingDirectory)/results/* test_results/
    git config user.name "your-username"
    git config user.email "your-email@example.com"
    git add .
    git commit -m "Add test results"
    git push origin main
  displayName: 'Push Test Results to GitHub'
  env:
    GITHUB_USER: $(GITHUB_USER)
    GITHUB_TOKEN: $(GITHUB_TOKEN)
